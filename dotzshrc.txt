# import environtment variable from .env file
export $(grep -v '^#' ~/.env | xargs)

alias load='source ~/.zshrc'
alias zsh='cat ~/.zshrc'
alias lri='composer create-project --prefer-dist laravel/laravel'
alias lr='php artisan optimize:clear && php artisan serve'
alias oc='php artisan optimize:clear'
alias mgr='php artisan migrate'
alias dbs='php artisan db:seed'
alias mgrs='php artisan migrate --seed'
alias mgrsf='php artisan migrate:fresh --seed'
function scr() {
   php artisan make:seeder "${*}Seeder"
}

function ctcr() {
   php artisan make:controller "${*}Controller"
}
function mcr() {
   php artisan make:model "${*}" -mcr
}
function mmgc() {
   php artisan make:migration "add_${1}_to_${2}_table"
}

alias ndev='npm run dev'
alias nb='npm run build'
function gf() {
    git fetch
}
function gcmsg() {
    git commit -am "$*"
}
function gpmsg() {
    # Get the current branch
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    git commit -am "$*" && git push -u origin "$current_branch"
}
function gpfmsg() {
    # Generate a commit message from the changed files
    commit_message=$(git status --short | awk '{print $2}' | tr '\n' ' ')

    # Get the current branch
    current_branch=$(git rev-parse --abbrev-ref HEAD)

    # Commit and push with auto-generated message
    git commit -am "$commit_message" && git push -u origin "$current_branch"
}
function gsb() {
   git switch "$*"
}
function gsbp() {
   git switch "$*" && git pull origin "$*"
}
function gco() {
   git checkout -b "$*"
}
function gcoc() {
   git checkout "$*"
}
function gpl() {
   # Get the current branch
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    git pull origin "$current_branch"
}
function undocommit() {
    # Get the current branch
    current_branch=$(git rev-parse --abbrev-ref HEAD)
    git pull origin "$current_branch"
    git reset --hard HEAD~1
}
function pf() {
  git push --force
}
function gstat() {
  git status
}
function grv() {
  git remote -v
}
function gsp() {
if [ -z "$1" ]; then
        echo "Usage: get_repo_size <owner/repo>"
        return 1
    fi

    local repo=$1

    if [ -z "$GITHUB_TOKEN" ]; then
        echo "Error: GITHUB_TOKEN is not set. Please check your .env file."
        return 1
    fi

    response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/$repo)

    if echo "$response" | grep -q '"message": "Not Found"'; then
        echo "Repository not found or you don't have access."
        return 1
    fi

    size_kb=$(echo "$response" | grep '"size":' | awk '{print $2}' | tr -d ',')
    size_mb=$(echo "scale=2; $size_kb / 1024" | bc)
    size_gb=$(echo "scale=2; $size_mb / 1024" | bc)

    echo "Repository Size for $repo:"
    echo "- $size_kb KB"
    echo "- $size_mb MB"
    echo "- $size_gb GB"

}



